name: Pull Request Workflow

# global environment variables to all jobs
env: 
  REGION: us-west-2
  SOLUTION_NAME: aws-media-services-application-mapper
  DIST_OUTPUT_BUCKET: msam-pr-build
on: 
  pull_request:
    types: [opened, edited, reopened]

jobs:
  scan-build-upload-job:
    runs-on: ubuntu-latest
    # use a specific environment for this build that has secrets defined and protection rules in place, if needed
    environment: pull_request_env 
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      # scan for any malware in the commit
      - name: ClamAV Scan
        uses: djdefi/gitavscan@main
        with:
          full: '--full'
      # scan for various types of keys and tokens
      - name: Trufflehog Scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: '--regex --entropy=False'      
      - name: Set up PR variables
        run: |
          PR_ID=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          echo "VERSION=PR$PR_ID" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=$REGION" >> $GITHUB_ENV
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Run build script
        run: |
          cd deployment
          ./build-s3-dist.sh $DIST_OUTPUT_BUCKET $SOLUTION_NAME $VERSION
      - name: Store templates for check jobs
        uses: actions/upload-artifact@v2
        with:
          name: cloudformation-templates
          path: deployment/global-s3-assets/*release.template

  cfn-lint-check-job:
    needs: scan-build-upload-job
    runs-on: ubuntu-latest
    name: Check templates with cfn-lint
    steps:
      - name: Download build templates
        uses: actions/download-artifact@v2
        with:
          name: cloudformation-templates
      - name: Check with cfn-lint
        uses: scottbrenner/cfn-lint-action@master
        with:
          args: '*.template'

  cfn-nag-check-job:
    needs: scan-build-upload-job
    runs-on: ubuntu-latest
    name: Check templates with cfn-nag
    steps:
      - name: Download build templates
        uses: actions/download-artifact@v2
        with:
          name: cloudformation-templates
      - name: Check with cfn-nag
        uses: stelligent/cfn_nag@master

  hawkeye-check-job:
    needs: scan-build-upload-job
    runs-on: ubuntu-latest
    name: Check source code with Hawkeye
    steps:
      # check out the merged PR
      - name: Checkout
        uses: actions/checkout@v2
      # check it with Hawkeye
      - name: Hawkeye Scanner
        uses: ./.github/actions/hawkeye-scan

  pylint-check-job:
    needs: scan-build-upload-job
    runs-on: ubuntu-latest
    name: Check source code with pylint
    steps:
      # check out the merged PR
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      # check it with pylint
      - name: Check with pylint
        run: |
          cd source
          ./tools/pylint.sh